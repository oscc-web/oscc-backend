import http from 'http'
import httpProxy from 'http-proxy'
import wrap from 'utils/wrapAsync.js'
import logger from '../logger.js'
const { createProxyServer } = httpProxy
/**
 * The descriptor of proxy rewrite target
 * @typedef {Object} RewriteTarget
 *
 * @property {String} [hostname='127.0.0.1']
 * Optional [localhost], forwarded target host
 *
 * @property {String} [method=Request.method]
 * Optional [Request.method], forwarded method
 *
 * @property {String} [path=Request.url]
 * Optional [Request.url], forwarded url
 *
 * @property {Number} port
 * Required: target port
 *
 * @property {Object} [headers=Request.headers]
 * Optional [Request.headers], forwarded headers
 */

/**
 * The proxy target resolution function
 * @callback Resolver
 * @param {import('express').Request} request
 * @returns {RewriteTarget | Promise<RewriteTarget>}
 */


/**
 * Proxies all http and webSocket traffic to target generated by rewrite
 * @param {Resolver | RewriteTarget | Number} argument
 */
export default function(argument) {
	/**
	 * @type {Resolver}
	 */
	let resolver, name
	// Convert constant resolution to resolver callback
	if (typeof argument === 'object') {
		resolver = () => argument
		name = `proxy-resolver[${argument.hostname || 'localhost'}:${argument.port}]`
	} else if (typeof argument === 'number') {
		resolver = () => ({ port: argument })
		name = `proxy-resolver[localhost:${argument}]`
	} else {
		resolver = argument;
		({ name } = argument)
	}
	// Check if rewrite is a function
	if (typeof resolver !== 'function') throw new TypeError
	// Return express server
	return wrap(async function(req, res, next) {
		const resolution = {
				path: req.url,
				method: req.method,
				headers: req.headers,
				hostname: '127.0.0.1',
				protocol: 'http:',
				...await resolver(req)
			}, resolutionUrl = `${resolution.protocol}//${resolution.hostname}:${resolution.port}`
		logger.debug(`Request ${req.headers?.host}${req.url} from ${req.origin} proxied to ${resolutionUrl}`)
		// Handle Websocket request
		if ('ws' in res) {
			logger.debug(`Websocket connection proxied by ${name}`);
			(async res => {
				/**
				 * @type {{ws: import('stream').Duplex}}
				 */
				const { ws, head } = res
				createProxyServer({
					target: resolutionUrl,
					ws: true
				}).ws(req, ws, head, undefined, e => {
					if (e instanceof Error) next(e)
				})
				// Ws.on('message', msg => ws.send(`RECV ${msg}`))
				// for (const i in [...Array(100).keys()]) {
				// 	ws.write(`Hello, ${i}!`)
				// 	await new Promise(r => setTimeout(r, 1000))
				// }
				// ws.close()

			})(res)
		} else {
			// Apply custom request transform
			const proxy = http.request(resolution, wrap(next_res => {
				res.writeHead(next_res.statusCode, next_res.headers)
				next_res.pipe(res, { end: true })
			})).addListener('error', e => next(e))
			req.pipe(proxy, { end: true })
			req.addListener('error', e => next(e))
		}
	}, name)
}

// Const handleWebsocketProxy = new class WebsocketProxyHandler extends EventEmitter {
// 	handleUpgrade(req, socket)
// }
