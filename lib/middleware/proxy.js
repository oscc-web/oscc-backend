import http from 'http'
import wrap from '../../utils/wrapAsync.js'
/**
 * The descriptor of proxy rewrite target
 * @typedef {Object} RewriteTarget
 * 
 * @property {String} [hostname='127.0.0.1']
 * Optional [localhost], forwarded target host
 * 
 * @property {String} [method=Request.method]
 * Optional [Request.method], forwarded method
 * 
 * @property {String} [path=Request.url]
 * Optional [Request.url], forwarded url
 * 
 * @property {Number} port
 * Required: target port
 * 
 * @property {Object} [headers=Request.headers]
 * Optional [Request.headers], forwarded headers
 */

/**
 * The proxy target resolution function
 * @callback Resolver
 * @param {import('express').Request} request
 * @returns {RewriteTarget | Promise<RewriteTarget>}
 */


/**
 * Proxies all http and webSocket traffic to target generated by rewrite
 * @param {Resolver | RewriteTarget | Number} argument 
 * @returns {(
 *	req: import('express').Request,
 *	res: import('express').Response,
 *	next: NextFunction
 * ) => undefined}
 */
export default function (argument) {
	/**
	 * @type {Resolver}
	 */
	let resolver
	// Convert constant resolution to resolver callback
	if (typeof argument === 'object') {
		resolver = () => argument
	} else if (typeof argument === 'number') {
		resolver = () => ({ port: argument })
	} else {
		resolver = argument
	}
	// Check if rewrite is a function
	if (typeof resolver !== 'function') throw new TypeError()
	// Return express server
	return wrap(async function (req, res, next) {
		// Apply custom request transform
		const proxy = http.request({
			path: req.url,
			method: req.method,
			headers: req.headers,
			hostname: '127.0.0.1',
			...await resolver(req)
		}, next_res => {
			res.writeHead(next_res.statusCode, next_res.headers)
			next_res.pipe(res, {
				end: true
			})
		}).addListener('error', e => next(e))
		req.pipe(proxy, { end: true })
		req.addListener('error', e => next(e))
	})
}